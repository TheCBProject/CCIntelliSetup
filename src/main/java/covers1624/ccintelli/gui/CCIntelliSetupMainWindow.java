/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package covers1624.ccintelli.gui;

import covers1624.ccintelli.launch.Launch;
import covers1624.ccintelli.module.Module;
import covers1624.ccintelli.module.ModuleEntry;
import covers1624.ccintelli.module.OrderEntry;
import covers1624.ccintelli.util.logger.LogHelper;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.*;

/**
 * @author brand
 */
public class CCIntelliSetupMainWindow extends javax.swing.JFrame {

    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
    private Module selectedModule = null;
    private DefaultListModel<String> srcListModel = new DefaultListModel<>();
    private LinkedList<ModuleEntry> selectedModuleEntries = new LinkedList<>();

    /**
     * Creates new form CCIntelliSetupMainWindow
     */
    public CCIntelliSetupMainWindow() {
        initComponents();
        setTitle("TODO... @Covers you can set this in the constructor.");

        workspaceDirField.setText(Launch.WORKSPACE.getAbsolutePath());
        moduleDirField.setText(Launch.MODULES.getAbsolutePath());
        runDirField.setText(Launch.PROJECT_RUN.getAbsolutePath());
        compilerOutDirField.setText(Launch.PROJECT_OUTPUT.getAbsolutePath());
        compilerSelector.setSelectedItem(Launch.COMPILER_SELECT);
        addNonNullAssertionsCheckbox.setSelected(Launch.NOT_NULL_ASSERTIONS);

        selectedModuleSourceList.setModel(srcListModel);

        setupModuleTree();
        setupDepTable();
        reloadModuleTree();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        mainPanel = new JPanel();
        mainTabbedPane = new JTabbedPane();
        setupPanel = new JPanel();
        setupLabel = new JLabel();
        leftSetupPanel = new JPanel();
        jLabel3 = new JLabel();
        workspaceDirField = new JTextField();
        workspaceDirSelect = new JButton();
        jLabel4 = new JLabel();
        moduleDirField = new JTextField();
        moduleDirSelect = new JButton();
        jLabel5 = new JLabel();
        runDirSelect = new JButton();
        runDirField = new JTextField();
        compilerOutDirSelect = new JButton();
        compilerOutDirField = new JTextField();
        jLabel6 = new JLabel();
        rightSetupPanel = new JPanel();
        jLabel2 = new JLabel();
        compilerSelector = new JComboBox<>();
        jLabel1 = new JLabel();
        addNonNullAssertionsCheckbox = new JCheckBox();
        modulePanel = new JPanel();
        leftModulePanel = new JPanel();
        jScrollPane1 = new JScrollPane();
        moduleTree = new JTree();
        addModuleField = new JTextField();
        addModuleButton = new JButton();
        removeModuleButton = new JButton();
        jPanel1 = new JPanel();
        jLabel7 = new JLabel();
        selectedModuleDirectoryField = new JTextField();
        jLabel8 = new JLabel();
        jScrollPane2 = new JScrollPane();
        selectedModuleSourceList = new JList<>();
        addModuleSrc = new JButton();
        removeModuleSrc = new JButton();
        editModuleSrc = new JButton();
        jLabel9 = new JLabel();
        addModuleDep = new JButton();
        removeModuleDep = new JButton();
        jScrollPane4 = new JScrollPane();
        depTable = new JTable();
        jMenuBar1 = new JMenuBar();
        fileMenu = new JMenu();
        importButton = new JMenuItem();
        exportButton = new JMenuItem();
        helpMenu = new JMenu();
        aboutMenuItem = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        setupLabel.setHorizontalAlignment(SwingConstants.CENTER);
        setupLabel.setText("All the setup stuff.");
        setupLabel.setHorizontalTextPosition(SwingConstants.CENTER);

        leftSetupPanel.setBorder(BorderFactory.createEtchedBorder());

        jLabel3.setText("Workspace directory:");

        workspaceDirField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                workspaceDirFieldKeyReleased(evt);
            }
        });

        workspaceDirSelect.setText("...");
        workspaceDirSelect.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                workspaceDirSelectActionPerformed(evt);
            }
        });

        jLabel4.setText("Module directory:");

        moduleDirField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                moduleDirFieldKeyReleased(evt);
            }
        });

        moduleDirSelect.setText("...");
        moduleDirSelect.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                moduleDirSelectActionPerformed(evt);
            }
        });

        jLabel5.setText("Run directory:");

        runDirSelect.setText("...");
        runDirSelect.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                runDirSelectActionPerformed(evt);
            }
        });

        runDirField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                runDirFieldKeyReleased(evt);
            }
        });

        compilerOutDirSelect.setText("...");
        compilerOutDirSelect.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                compilerOutDirSelectActionPerformed(evt);
            }
        });

        compilerOutDirField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                compilerOutDirFieldKeyReleased(evt);
            }
        });

        jLabel6.setText("Compiler output directory:");

        GroupLayout leftSetupPanelLayout = new GroupLayout(leftSetupPanel);
        leftSetupPanel.setLayout(leftSetupPanelLayout);
        leftSetupPanelLayout.setHorizontalGroup(leftSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(leftSetupPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(leftSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(leftSetupPanelLayout.createSequentialGroup()
                                        .addComponent(workspaceDirField)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(workspaceDirSelect))
                                .addGroup(leftSetupPanelLayout.createSequentialGroup()
                                        .addComponent(moduleDirField)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(moduleDirSelect))
                                .addGroup(leftSetupPanelLayout.createSequentialGroup()
                                        .addComponent(runDirField)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(runDirSelect))
                                .addGroup(leftSetupPanelLayout.createSequentialGroup()
                                        .addComponent(compilerOutDirField)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(compilerOutDirSelect))
                                .addGroup(leftSetupPanelLayout.createSequentialGroup()
                                        .addGroup(leftSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel5)
                                                .addComponent(jLabel6))
                                        .addGap(0, 264, Short.MAX_VALUE)))
                        .addContainerGap())
        );
        leftSetupPanelLayout.setVerticalGroup(leftSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(leftSetupPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(leftSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(workspaceDirField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(workspaceDirSelect))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(leftSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(moduleDirField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(moduleDirSelect))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(leftSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(runDirField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(runDirSelect))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(leftSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(compilerOutDirField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(compilerOutDirSelect))
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rightSetupPanel.setBorder(BorderFactory.createEtchedBorder());

        jLabel2.setText("Compiler select:");

        compilerSelector.setModel(new DefaultComboBoxModel<>(new String[] { "Eclipse", "Javac" }));
        compilerSelector.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                compilerSelectorActionPerformed(evt);
            }
        });

        jLabel1.setText("Add Not-Null Assertions");

        addNonNullAssertionsCheckbox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addNonNullAssertionsCheckboxActionPerformed(evt);
            }
        });

        GroupLayout rightSetupPanelLayout = new GroupLayout(rightSetupPanel);
        rightSetupPanel.setLayout(rightSetupPanelLayout);
        rightSetupPanelLayout.setHorizontalGroup(rightSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(rightSetupPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(rightSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(rightSetupPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(compilerSelector, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(rightSetupPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(addNonNullAssertionsCheckbox)))
                        .addContainerGap(239, Short.MAX_VALUE))
        );
        rightSetupPanelLayout.setVerticalGroup(rightSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(rightSetupPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(rightSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(compilerSelector, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(rightSetupPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(addNonNullAssertionsCheckbox))
                        .addContainerGap(369, Short.MAX_VALUE))
        );

        GroupLayout setupPanelLayout = new GroupLayout(setupPanel);
        setupPanel.setLayout(setupPanelLayout);
        setupPanelLayout.setHorizontalGroup(setupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(setupPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(setupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(setupPanelLayout.createSequentialGroup()
                                        .addComponent(leftSetupPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rightSetupPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(setupLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
        );
        setupPanelLayout.setVerticalGroup(setupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, setupPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(setupLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(setupPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(rightSetupPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(leftSetupPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
        );

        mainTabbedPane.addTab("Setup", setupPanel);

        leftModulePanel.setBorder(BorderFactory.createEtchedBorder());

        DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode("Modules");
        DefaultMutableTreeNode treeNode2 = new DefaultMutableTreeNode("Forge");
        treeNode1.add(treeNode2);
        moduleTree.setModel(new DefaultTreeModel(treeNode1));
        moduleTree.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                moduleTreeMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(moduleTree);

        addModuleField.setToolTipText("New Module Name.");

        addModuleButton.setText("Add Module");
        addModuleButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addModuleButtonActionPerformed(evt);
            }
        });

        removeModuleButton.setText("Remove Module");
        removeModuleButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeModuleButtonActionPerformed(evt);
            }
        });

        GroupLayout leftModulePanelLayout = new GroupLayout(leftModulePanel);
        leftModulePanel.setLayout(leftModulePanelLayout);
        leftModulePanelLayout.setHorizontalGroup(leftModulePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(leftModulePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(leftModulePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1)
                                .addGroup(leftModulePanelLayout.createSequentialGroup()
                                        .addComponent(addModuleButton)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                        .addComponent(removeModuleButton))
                                .addComponent(addModuleField)))
        );
        leftModulePanelLayout.setVerticalGroup(leftModulePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(leftModulePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addModuleField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(leftModulePanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(addModuleButton)
                                .addComponent(removeModuleButton)))
        );

        jPanel1.setBorder(BorderFactory.createEtchedBorder());

        jLabel7.setText("Directory:");

        selectedModuleDirectoryField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                selectedModuleDirectoryFieldKeyReleased(evt);
            }
        });

        jLabel8.setText("Src Directorys:");

        selectedModuleSourceList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectedModuleSourceList.setMinimumSize(new Dimension(20, 20));
        jScrollPane2.setViewportView(selectedModuleSourceList);

        addModuleSrc.setText("Add");
        addModuleSrc.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addModuleSrcActionPerformed(evt);
            }
        });

        removeModuleSrc.setText("Remove");
        removeModuleSrc.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeModuleSrcActionPerformed(evt);
            }
        });

        editModuleSrc.setText("Edit");
        editModuleSrc.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                editModuleSrcActionPerformed(evt);
            }
        });

        jLabel9.setText("Dependencies:");

        addModuleDep.setText("Add");
        addModuleDep.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addModuleDepActionPerformed(evt);
            }
        });

        removeModuleDep.setText("Remove");
        removeModuleDep.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeModuleDepActionPerformed(evt);
            }
        });

        jScrollPane4.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setHorizontalScrollBar(null);

        depTable.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        depTable.setModel(depTablelModel = new DefaultTableModel(
                new Object [][] {
                        { new Boolean(false), null, null}
                },
                new String [] {
                        "Export", "Name", "Scope"
                }
        ) {
            Class[] types = new Class [] {
                    Boolean.class, String.class, String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        depTable.setToolTipText("");
        depTable.setColumnSelectionAllowed(true);
        depTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(depTable);
        depTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        if (depTable.getColumnModel().getColumnCount() > 0) {
            depTable.getColumnModel().getColumn(0).setMinWidth(60);
            depTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            depTable.getColumnModel().getColumn(0).setMaxWidth(60);
            depTable.getColumnModel().getColumn(2).setMinWidth(80);
            depTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            depTable.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(addModuleDep)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removeModuleDep)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                                                .addComponent(selectedModuleDirectoryField)
                                                .addComponent(jScrollPane2)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabel7)
                                                                .addComponent(jLabel8)
                                                                .addComponent(jLabel9)
                                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                                        .addComponent(addModuleSrc)
                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(removeModuleSrc)))
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addComponent(editModuleSrc, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedModuleDirectoryField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(addModuleSrc)
                                .addComponent(removeModuleSrc)
                                .addComponent(editModuleSrc))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(addModuleDep)
                                .addComponent(removeModuleDep)))
        );

        GroupLayout modulePanelLayout = new GroupLayout(modulePanel);
        modulePanel.setLayout(modulePanelLayout);
        modulePanelLayout.setHorizontalGroup(modulePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(modulePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(leftModulePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
        );
        modulePanelLayout.setVerticalGroup(modulePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, modulePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(modulePanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(leftModulePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
        );

        mainTabbedPane.addTab("Module viewer tree", modulePanel);

        GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(mainTabbedPane, GroupLayout.Alignment.TRAILING)
        );
        mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(mainTabbedPane, GroupLayout.Alignment.TRAILING)
        );

        fileMenu.setText("File");

        importButton.setText("Import Setup");
        importButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                importSetup(evt);
            }
        });
        fileMenu.add(importButton);

        exportButton.setText("Export Setup");
        exportButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exportSetup(evt);
            }
        });
        fileMenu.add(exportButton);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                displayAboutText(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Events">

    private void displayAboutText(ActionEvent evt) {
        JOptionPane.showMessageDialog(this, "//TODO Put something here!!!\n-Gui written by brandon3055\n-Back End written by covers1624", "About", JOptionPane.INFORMATION_MESSAGE);
    }

    // <editor-fold defaultstate="collapsed" desc="Setup File Fields">

    //Launches the file picker for Workspace Directory
    private void workspaceDirSelectActionPerformed(ActionEvent evt) {
        workspaceDirField.setText(chooseDir(workspaceDirField.getText()));
        Launch.WORKSPACE = new File(workspaceDirField.getText());
    }

    //Launches the file picker for Module Directory
    private void moduleDirSelectActionPerformed(ActionEvent evt) {
        moduleDirField.setText(chooseDir(moduleDirField.getText()));
        Launch.MODULES = new File(moduleDirField.getText());
    }

    //Launches the file picker for Run Directory
    private void runDirSelectActionPerformed(ActionEvent evt) {
        runDirField.setText(chooseDir(runDirField.getText()));
        Launch.PROJECT_RUN = new File(runDirField.getText());
    }

    //Launches the file picker for Out Directory
    private void compilerOutDirSelectActionPerformed(ActionEvent evt) {
        compilerOutDirField.setText(chooseDir(compilerOutDirField.getText()));
        Launch.PROJECT_OUTPUT = new File(compilerOutDirField.getText());
    }

    private void workspaceDirFieldKeyReleased(KeyEvent evt) {
        Launch.WORKSPACE = new File(workspaceDirField.getText());
    }

    private void moduleDirFieldKeyReleased(KeyEvent evt) {
        Launch.MODULES = new File(moduleDirField.getText());
    }

    private void runDirFieldKeyReleased(KeyEvent evt) {
        Launch.PROJECT_RUN = new File(runDirField.getText());
    }

    private void compilerOutDirFieldKeyReleased(KeyEvent evt) {
        Launch.PROJECT_OUTPUT = new File(compilerOutDirField.getText());
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Compiler & Non-Null">

    private void addNonNullAssertionsCheckboxActionPerformed(ActionEvent evt) {
        Launch.NOT_NULL_ASSERTIONS = addNonNullAssertionsCheckbox.isSelected();
    }

    private void compilerSelectorActionPerformed(ActionEvent evt) {
        Launch.COMPILER_SELECT = compilerSelector.getSelectedItem().toString();
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Module Tree">

    private void moduleTreeMousePressed(MouseEvent e) {
        int selRow = moduleTree.getRowForLocation(e.getX(), e.getY());
        TreePath selPath = moduleTree.getPathForLocation(e.getX(), e.getY());
        if (selRow != -1 && selPath != null) {
            if (e.getClickCount() == 1) {
                if (selPath.getLastPathComponent() instanceof ModuleNode) {
                    moduleSelected(((ModuleNode) selPath.getLastPathComponent()).module);
                }
            }
            else if (e.getClickCount() == 2) {
            }

            if (moduleTree.getEditingPath() != null) {
                String editing = moduleTree.getEditingPath().getLastPathComponent().toString();
                if (editing.equals("Modules") || editing.equals("Forge")) {
                    moduleTree.stopEditing();
                }
            }
        }
    }

    private void addModuleButtonActionPerformed(ActionEvent evt) {
        if (addModuleField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You must first enter a name for this module!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        for (Module module : GuiFields.modules) {
            if (module.NAME.equals(addModuleField.getText())) {
                JOptionPane.showMessageDialog(this, "There is already a module with that name!\nPlease choose another name or rename the existing module.", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        Module module = new Module();
        module.NAME = addModuleField.getText();
        module.CONTENT_ROOT = new File(module.NAME);
        module.sourceFolders = GuiFields.findModuleSrc(module);
        GuiFields.onModuleAdded(module);
        reloadModuleTree();
        addModuleField.setText("");
    }

    private void removeModuleButtonActionPerformed(ActionEvent evt) {
        if (selectedModule == null || !GuiFields.modules.contains(selectedModule)) {
            JOptionPane.showMessageDialog(this, "Please select a module!", "Error", JOptionPane.WARNING_MESSAGE);
            selectedModuleDirectoryField.setText("");
            return;
        }

        if (selectedModule.NAME.equals("Forge")) {
            JOptionPane.showMessageDialog(this, "You can not delete the forge module!!!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the module\n" + selectedModule.NAME + "?", "Delete Module?", JOptionPane.YES_NO_OPTION) == 1) {
            return;
        }

        GuiFields.modules.remove(selectedModule);
        reloadModuleTree();
        moduleSelected(null);
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Edit Module">

    private void selectedModuleDirectoryFieldKeyReleased(KeyEvent evt) {
        if (selectedModule == null || !GuiFields.modules.contains(selectedModule)) {
            JOptionPane.showMessageDialog(this, "Please select a module!", "Error", JOptionPane.WARNING_MESSAGE);
            selectedModuleDirectoryField.setText("");
            return;
        }

        selectedModule.CONTENT_ROOT = new File(selectedModuleDirectoryField.getText());
    }

    private void addModuleSrcActionPerformed(ActionEvent evt) {
        if (selectedModule == null || !GuiFields.modules.contains(selectedModule)) {
            JOptionPane.showMessageDialog(this, "Please select a module!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String dir = JOptionPane.showInputDialog(this, "Enter Src Directory");
        if (dir == null || dir.isEmpty()) {
            return;
        }

        if (selectedModule.sourceFolders.contains(dir)) {
            JOptionPane.showMessageDialog(this, "That Src already exists!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        selectedModule.sourceFolders.add(dir);
        moduleSelected(selectedModule);
    }

    private void removeModuleSrcActionPerformed(ActionEvent evt) {
        if (selectedModule == null || !GuiFields.modules.contains(selectedModule)) {
            JOptionPane.showMessageDialog(this, "Please select a module!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int index = selectedModuleSourceList.getSelectedIndex();
        if (index == -1 || index > srcListModel.size()) {
            JOptionPane.showMessageDialog(this, "Please select source dir to remove", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        selectedModule.sourceFolders.remove(srcListModel.get(index));
        moduleSelected(selectedModule);
    }

    private void editModuleSrcActionPerformed(ActionEvent evt) {
        if (selectedModule == null || !GuiFields.modules.contains(selectedModule)) {
            JOptionPane.showMessageDialog(this, "Please select a module!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int index = selectedModuleSourceList.getSelectedIndex();
        if (index == -1 || index > srcListModel.size()) {
            JOptionPane.showMessageDialog(this, "Please select source dir to edit", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String newDir = JOptionPane.showInputDialog(this, "Edit Src Directory", srcListModel.get(index));
        if (newDir == null || newDir.isEmpty()) {
            return;
        }

        selectedModule.sourceFolders.remove(srcListModel.get(index));
        selectedModule.sourceFolders.add(newDir);
        moduleSelected(selectedModule);
    }

    private void addModuleDepActionPerformed(ActionEvent evt) {
        if (selectedModule == null || !GuiFields.modules.contains(selectedModule)) {
            JOptionPane.showMessageDialog(this, "Please select a module!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        java.util.List<String> selection = new ArrayList<>();

        for (Module module : GuiFields.modules) {
            boolean canAdd = true;
            for (OrderEntry entry : selectedModule.orderEntries) {
                if (entry instanceof ModuleEntry && ((ModuleEntry) entry).NAME.equals(module.NAME)) {
                    canAdd = false;
                }
            }

            if (canAdd && !module.NAME.equals(selectedModule.NAME)) {
                selection.add(module.NAME);
            }
        }

        if (selection.size() == 0) {
            JOptionPane.showMessageDialog(this, "There are no modules that can be added as a dependency.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String dep = (String) JOptionPane.showInputDialog(this, "Please select a module", "Select Module", JOptionPane.QUESTION_MESSAGE, null, selection.toArray(), selection.get(0));
        if (dep == null || dep.isEmpty()) {
            return;
        }

        selectedModule.orderEntries.add(new ModuleEntry(dep, false, OrderEntry.Scope.PROVIDED));
        moduleSelected(selectedModule);
    }

    private void removeModuleDepActionPerformed(ActionEvent evt) {
        if (selectedModule == null || !GuiFields.modules.contains(selectedModule)) {
            JOptionPane.showMessageDialog(this, "Please select a module!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int row = depTable.getSelectedRow();
        if (row == -1 || row >= selectedModuleEntries.size()) {
            JOptionPane.showMessageDialog(this, "Please select a dep!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (selectedModuleEntries.get(row).NAME.equals("Forge")) {
            JOptionPane.showMessageDialog(this, "You can not remove forge as a dependency!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        depTable.updateUI();
        selectedModule.orderEntries.remove(selectedModuleEntries.get(row));
        moduleSelected(selectedModule);
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="File">

    private void importSetup(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter;
        chooser.addChoosableFileFilter(filter = new FileNameExtensionFilter("JSON (.json)", ".json"));
        chooser.setFileFilter(filter);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (!chooser.getSelectedFile().exists()) {
                JOptionPane.showMessageDialog(this, "That file does not exist!", "File Not Found", JOptionPane.ERROR_MESSAGE);
                return;
            }
            GuiFields.importSetup(chooser.getSelectedFile());
        }
    }

    private void exportSetup(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter;
        chooser.addChoosableFileFilter(filter = new FileNameExtensionFilter("JSON (.json)", ".json"));
        chooser.setFileFilter(filter);

        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (chooser.getSelectedFile().exists()) {
                if (JOptionPane.showConfirmDialog(this, "The selected file already exists!\nDo you wish to overwrite it?", "Overwrite?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 1) {
                    return;
                }
                GuiFields.exportSetup(chooser.getSelectedFile());
                return;
            }

            String path = chooser.getSelectedFile().getAbsolutePath();

            if (chooser.getFileFilter() == filter && !chooser.getSelectedFile().getAbsolutePath().endsWith(".json")) {
                GuiFields.exportSetup(new File(path + ".json"));
            }
            else {
                GuiFields.exportSetup(chooser.getSelectedFile());
            }
        }
    }

    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Misc">

    public String chooseDir(String defaultDir) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        File selectedFile = new File(defaultDir);

        if (selectedFile.exists()) {
            chooser.setCurrentDirectory(selectedFile);
        }

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            selectedFile = chooser.getSelectedFile();
        }

        return selectedFile.getAbsolutePath();
    }

    private void setupModuleTree() {
        moduleTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        rootNode = new DefaultMutableTreeNode("Modules");
        treeModel = new DefaultTreeModel(rootNode);
        moduleTree.setModel(treeModel);
        moduleTree.setEditable(false);
//        treeModel.addTreeModelListener(new TreeModelListener() {
//            @Override
//            public void treeNodesChanged(TreeModelEvent e) {
//                if (e.getChildIndices() == null) {
//                    return;
//                }
//
//                DefaultMutableTreeNode n = (DefaultMutableTreeNode) e.getTreePath().getLastPathComponent();
//                ModuleNode node = (ModuleNode) n.getChildAt(e.getChildIndices()[0]);
//
//                String newName = node.getUserObject().toString();
//                if (!newName.equals(node.module.NAME)) {
//                    boolean cancelRename = false;
//                    for (Module module : GuiFields.modules) {
//                        if (module.NAME.equals(newName)) {
//                            cancelRename = true;
//                            break;
//                        }
//                    }
//
//                    if (cancelRename) {
//                        reloadModuleTree();
//                        JOptionPane.showMessageDialog(CCIntelliSetupMainWindow.this, "There is already a module with that name!\nPlease choose another name or rename the existing module.", "Error", JOptionPane.WARNING_MESSAGE);
//                    }
//                    else {
//                        LogHelper.info("Renaming module: " + node.module.NAME + " -> " + newName);
//                        node.module.NAME = newName;
//                    }
//                }
//            }
//
//            @Override
//            public void treeNodesInserted(TreeModelEvent e) {
//
//            }
//
//            @Override
//            public void treeNodesRemoved(TreeModelEvent e) {
//
//            }
//
//            @Override
//            public void treeStructureChanged(TreeModelEvent e) {
//
//            }
//        });
    }

    private void setupDepTable() {
        depTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        TableColumn scopeColumn = depTable.getColumnModel().getColumn(2);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem(OrderEntry.Scope.COMPILE);
        comboBox.addItem(OrderEntry.Scope.TEST);
        comboBox.addItem(OrderEntry.Scope.RUNTIME);
        comboBox.addItem(OrderEntry.Scope.PROVIDED);
        scopeColumn.setCellEditor(new DefaultCellEditor(comboBox));

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        scopeColumn.setCellRenderer(centerRenderer);

        depTable.getModel().addTableModelListener(e -> {
            int column = e.getColumn();
            int row = e.getFirstRow();
            if (column != -1 && selectedModule != null && GuiFields.modules.contains(selectedModule)) {
                ModuleEntry entry = selectedModuleEntries.get(row);

                if (column == 0) {
                    entry.export = (boolean) depTablelModel.getValueAt(row, column);
                }
                else if (column == 1) {
                    entry.NAME = (String) depTablelModel.getValueAt(row, column);
                }
                else if (column == 2) {
                    entry.scope = (OrderEntry.Scope) depTablelModel.getValueAt(row, column);
                }
            }
        });

    }

    public void reloadModuleTree() {
        rootNode.removeAllChildren();
        for (Module module : GuiFields.modules) {
            ModuleNode moduleNode = new ModuleNode(module);
            rootNode.add(moduleNode);
            LogHelper.info(module.NAME);
        }
        treeModel.reload();
        moduleTree.expandRow(0);
    }

    public void moduleSelected(Module module) {
        selectedModule = module;
        selectedModuleDirectoryField.setText("");
        srcListModel.clear();
        selectedModuleEntries.clear();
        while (depTablelModel.getRowCount() > 0) {
            depTablelModel.removeRow(0);
        }

        if (module == null) {
            return;
        }

        selectedModuleDirectoryField.setText(module.CONTENT_ROOT.getAbsolutePath());
        for (String src : module.sourceFolders) {
            srcListModel.addElement(src);
        }

        for (OrderEntry dep : module.orderEntries) {
            if (dep instanceof ModuleEntry) {
                depTablelModel.addRow(new Object[] {dep.export, ((ModuleEntry) dep).NAME, dep.scope});
                selectedModuleEntries.add((ModuleEntry) dep);
            }
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Variables">
    // Variables declaration - do not modify                     
    private JMenuItem aboutMenuItem;
    private JButton addModuleButton;
    private JButton addModuleDep;
    private JTextField addModuleField;
    private JButton addModuleSrc;
    private JCheckBox addNonNullAssertionsCheckbox;
    private JTextField compilerOutDirField;
    private JButton compilerOutDirSelect;
    private JComboBox<String> compilerSelector;
    private DefaultTableModel depTablelModel;
    private JTable depTable;
    private JButton editModuleSrc;
    private JMenuItem exportButton;
    private JMenu fileMenu;
    private JMenu helpMenu;
    private JMenuItem importButton;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JMenuBar jMenuBar1;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane4;
    private JPanel leftModulePanel;
    private JPanel leftSetupPanel;
    private JPanel mainPanel;
    private JTabbedPane mainTabbedPane;
    private JTextField moduleDirField;
    private JButton moduleDirSelect;
    private JPanel modulePanel;
    private JTree moduleTree;
    private JButton removeModuleButton;
    private JButton removeModuleDep;
    private JButton removeModuleSrc;
    private JPanel rightSetupPanel;
    private JTextField runDirField;
    private JButton runDirSelect;
    private JTextField selectedModuleDirectoryField;
    private JList<String> selectedModuleSourceList;
    private JLabel setupLabel;
    private JPanel setupPanel;
    private JTextField workspaceDirField;
    private JButton workspaceDirSelect;
    // End of variables declaration                   
    // </editor-fold>
}
//Export file browser. Current directory no file name
